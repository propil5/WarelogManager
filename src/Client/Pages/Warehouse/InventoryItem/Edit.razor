@page "/inventory/items/add"
@page "/inventory/items/edit/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WarelogManager.Client.Resources.Common
@using WarelogManager.Shared.Resources.Warehouse.Product
@using WarelogManager.Shared.Resources.Warehouse.InventoryItem
@using WarelogManager.Shared.Enums
@using Blazored.Typeahead;

@inject NavigationManager NavManager
@inject HttpClient Http
@inject IToastService toastService;


<h3>Add new inventory item</h3>
<EditForm Model="@inventoryItem" OnValidSubmit="HandleValidSubmit" width="40%">
    <div class="form-row">
        <div class="col-md-8">
            <DataAnnotationsValidator/>
        <ValidationSummary />
        <div class="row">
            @foreach (var image in @inventoryItem.Images)
            {
                <img class="rounded-sm img-fluid" src="@image.Src">
            }
        </div>
        <div class="form-group">
            <p>
                <label>
                    Images:
                    <InputFile id="Images" OnChange="@LoadImages" multiple />
                </label>
            </p>
        </div>
         <div class="form-group">
            <p>
                <label>
                    SKU Label:
                    <InputText id="SKULabel" @bind-Value="@inventoryItem.SKULabel" />
                </label>
            </p>
        </div>
        <div class="form-group">
            <p>
                <label>
                    UnitOfMeasure:
                    <InputSelect @bind-Value="@inventoryItem.UnitOfMeasure">
                        @foreach (var value in Enum.GetValues(typeof(InventoryUnitOfMeasureEnum)))
                        {
                            <option value="@((int)value)">@value</option>
                        }
                    </InputSelect>
                </label>
            </p>
        </div>
        <div class="form-group">
            <p>
                <label>
                    Description:
                    <InputText id="Description" @bind-Value="@inventoryItem.Descritption" />
                </label>
            </p>
        </div>
        <div class="form-group">
            <p>
                <label>
                    Available Quantity:
                    <InputNumber id="AvailableQuantity" @bind-Value="@inventoryItem.AvailableQuantity" />
                </label>
            </p>
        </div>
        <div class="form-group">
            <p>
                <label>
                    Total Quantity:
                    <InputNumber id="AvailableQuantity" @bind-Value="@inventoryItem.TotalQuantity" />
                </label>
            </p>
        </div>
        <div>
                <label>
                    Product: 
                    <BlazoredTypeahead SearchMethod="SearchProducts"
                        ConvertMethod="ConvertProduct"
                        @bind-Value="@inventoryItem.ProductId"
                        placeholder="Search by product name"
                        EnableDropDown
                        label="blaka"
                        width="20%">
                    <SelectedTemplate Context="personId">
                        @{
                            var selectedProduct = LoadSelectedProduct(personId);

                            <text>ID: @selectedProduct?.Id, @selectedProduct?.Name </text>
                        }
                    </SelectedTemplate>
                    <ResultTemplate Context="product">
                        @product.Name (Id: @product.Id)
                    </ResultTemplate>
                </BlazoredTypeahead>
                <ValidationMessage For="@(() => inventoryItem.ProductId)" />
              </label>
        </div>
    </div>
</div>
</EditForm>

    @if (IsUpdate)
    {
        <button type="submit" class="btn btn-warning" disabled=@IsTaskRunning @onclick="UpdateItemAsync">Update</button>
    }
    else
    {
        <button type="submit" class="btn btn-success" disabled=@IsTaskRunning @onclick="HandleValidSubmit">Add</button>
    }




@code {
    [Parameter]
    public int? Id { get; set; }
    public bool IsUpdate{ get; set; }
    private InventoryItemResource inventoryItem { get; set; }
    private ProductResource[] products { get; set; }
    //private ProductResource product { get; set; }
    bool IsTaskRunning = false;
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 10;

    protected override async Task OnInitializedAsync()
    {
        IsTaskRunning = true;
        IsUpdate = false;

        inventoryItem = new InventoryItemResource
        {
            Images = new List<BaseImageResource>()
        };
        await GetProductsAsync();
        if (Id != null)
        {
            inventoryItem = await Http.GetFromJsonAsync<InventoryItemResource>($"/api/inventory/item/{Id}");
            IsUpdate = true;
        }
        IsTaskRunning = false;
    }

    private async Task HandleValidSubmit()
    {
        IsTaskRunning = true;
        var result = await Http.PostAsJsonAsync("api/inventory/item", inventoryItem);
        if (result.IsSuccessStatusCode)
        {
            var productResource = await result.Content.ReadFromJsonAsync<InventoryItemResource>();
            toastService.ShowSuccess($"Succesfully added inventory item with id: {productResource.Id}");

        }
        else
        {
            toastService.ShowError($"Could not add invnetory item.");
        }
        IsTaskRunning = false;
    }

    private async Task UpdateItemAsync()
    {
        IsTaskRunning = true;
        var result = await Http.PutAsJsonAsync($"api/inventory/item/{inventoryItem.Id}", inventoryItem);
        if (result.IsSuccessStatusCode)
        {
            toastService.ShowSuccess($"Succesfully updated ivnentory item with id: {inventoryItem.Id}");
            NavManager.NavigateTo($"/inventory/items");
        }
        else
        {
            toastService.ShowError($"Could not update inventory item.");
        }
        IsTaskRunning = false;
    }

    private async Task LoadImages(InputFileChangeEventArgs e)
    {
        IsTaskRunning = true;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var newImage = new BaseImageResource
                {
                    Data = new byte[file.Size]
                };

                await file.OpenReadStream().ReadAsync(newImage.Data);
                newImage.Type = file.ContentType;
                newImage.Src = $"data:{newImage.Type};base64,{Convert.ToBase64String(newImage.Data)}";
                inventoryItem.Images.Add(newImage);
            }
            catch (Exception ex)
            {
                toastService.ShowError($"Could not read the file.");
            }
        }

        IsTaskRunning = false;
    }

    private async Task GetProductsAsync()
    {
        products = await Http.GetFromJsonAsync<ProductResource[]>("api/product");
    }

    private async Task<IEnumerable<ProductResource>> SearchProducts(string searchText) 
    {
        //if(searchText)
        return await Task.FromResult(products?.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private int? ConvertProduct(ProductResource product) => product?.Id;
    private ProductResource LoadSelectedProduct(int? id) => products.FirstOrDefault(p => p.Id == id);
}
