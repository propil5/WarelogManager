@page "/products"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WarelogManager.Shared.Resources.Warehouse.Product
@attribute [Authorize]
@inject NavigationManager NavManager
@inject HttpClient Http
@inject IToastService toastService

<h1>Products</h1>

<p>Products stored in the database: </p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable Items="@products">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Products</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Weight</MudTh>
        <MudTh>Width</MudTh>
        <MudTh>Height</MudTh>
        <MudTh>Pallet Id</MudTh>
        <MudTh>Added By</MudTh>
        <MudTh>Added Date</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Weight">@context.Weight</MudTd>
        <MudTd DataLabel="Width">@context.Width</MudTd>
        <MudTd DataLabel="Height">@context.Height</MudTd>
        <MudTd DataLabel="Pallet Id">@context.PalletId</MudTd>
        <MudTd DataLabel="Added By">@context.AddedBy</MudTd>
        <MudTd DataLabel="Added Date">@context.AddedDate</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager InfoFormat="@($"Left {infoFormat}")" HorizontalAlignment="HorizontalAlignment.Left" HidePageNumber="@hidePageNumber" HidePagination="@hidePagination" HideRowsPerPage="@hideRowsPerPage" />
        <MudTablePager InfoFormat="@($"Start {infoFormat}")" HorizontalAlignment="HorizontalAlignment.Start" HidePageNumber="@hidePageNumber" HidePagination="@hidePagination" HideRowsPerPage="@hideRowsPerPage" />
        <MudTablePager InfoFormat="@($"Center {infoFormat}")" HorizontalAlignment="HorizontalAlignment.Center" HidePageNumber="@hidePageNumber" HidePagination="@hidePagination" HideRowsPerPage="@hideRowsPerPage" />
        <MudTablePager InfoFormat="@($"Right {infoFormat}")" HorizontalAlignment="HorizontalAlignment.Right" HidePageNumber="@hidePageNumber" HidePagination="@hidePagination" HideRowsPerPage="@hideRowsPerPage" />
        <MudTablePager InfoFormat="@($"End {infoFormat}")" HorizontalAlignment="HorizontalAlignment.End" HidePageNumber="@hidePageNumber" HidePagination="@hidePagination" HideRowsPerPage="@hideRowsPerPage" />
    </PagerContent>
</MudTable>
<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@hideRowsPerPage" Color="Color.Tertiary">Hide/Show Rows per Page</MudSwitch>
    <MudSwitch @bind-Checked="@hidePageNumber" Color="Color.Primary">Hide/Show Page Number</MudSwitch>
    <MudSwitch @bind-Checked="@hidePagination" Color="Color.Secondary">Hide/Show Pagination</MudSwitch>
</div>
}

@code {
    private ProductResource[] products;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    bool IsTaskRunning = false;
    bool DisplayEditColumn => products?.Any(x => x.EditedBy != null) ?? false;

    protected override async Task OnInitializedAsync()
    {
        await GetProductsAsync();        
    }

    private async Task GetProductsAsync()
    {
        products = await Http.GetFromJsonAsync<ProductResource[]>("api/product/");
    }

    private void RedirectToProductEdit(int? id = null)
    {
        if(id == null)
        {
            NavManager.NavigateTo($"/products/add");
        }
        else
        {
            NavManager.NavigateTo($"/products/edit/{id}");    
        }
    }
    
    private async Task RemoveProductAsync(int id)
    {
        IsTaskRunning = true;
        var result = await Http.DeleteAsync($"api/product/{id}");
        if (result.IsSuccessStatusCode)
        {
            toastService.ShowWarning($"Succesfully removed product with id: {id}.");
            await GetProductsAsync();
        }
        IsTaskRunning = false;
    }
}
