@page "/shop/products"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WarelogManager.Client.Resources.Common
@using WarelogManager.Shared.Resources.Warehouse.InventoryItem
@using WarelogManager.Shared.Resources.Warehouse.Product
@attribute [Authorize]
@inject NavigationManager NavManager
@inject HttpClient Http
@inject IToastService toastService

<h1>Products</h1>

@if(products == null)
{
    <div class="spinner-grow text-success" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="row">
        @foreach(var product in products)
        {
            var inventoryItems = product.InventoryItems;
            if(inventoryItems == null || inventoryItems.Count < 1)
            {
                continue;
            }
            var cardInventoryItem = product.InventoryItems.First();
            var image = GetItemImage(cardInventoryItem);

            <div>
                <div class="card" style="width: 18rem;">
                    <img @bind-src="image.Src" @bind-src:event="onchange" class="card-img-top" alt="@image.Alt">
                    <div class="card-img-overlay" style="color: #000000">
                        <h5 class="card-title">@product.Name</h5>
                    </div>
                    <div class="card-body">
                        <div id="productCarousel" class="carousel slide" data-ride="carousel">
                            <div class="carousel-inner">
                                @foreach (var item in product.InventoryItems)
                                {
                                    var itemImage = GetItemImage(item);
                                        <div class="carousel-item active">
                                            <img src="@itemImage.Src" class="d-block w-100" style="max-width:60px; max-height: 60px;" 
                                            alt="@itemImage.Alt" @onclick="@(e => cardInventoryItem = item)">
                                        </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private ProductResource[] products;
    bool IsTaskRunning = false;
    bool DisplayEditColumn => products?.Any(x => x.EditedBy != null) ?? false;

    protected override async Task OnInitializedAsync()
    {
        await GetProductsAsync();        
    }

    private async Task GetProductsAsync()
    {
        products = await Http.GetFromJsonAsync<ProductResource[]>("api/product/");
    }

    private BaseImageResource GetItemImage(BaseInventoryItemResource inventoryItem)
    {
        if (inventoryItem.Images == null || inventoryItem.Images.Count == 0)
        {
            return new BaseImageResource
            {
                Src = @"/images/question_mark.png",
                Alt = inventoryItem.ProductName ?? "n/a"
            };
        }
        var image = inventoryItem.Images.First();
        image.Src = $"data:{image.Type};base64,{Convert.ToBase64String(image.Data)}";
        image.Alt = inventoryItem.ProductName ?? "n/a";
        return image;
    }
}
