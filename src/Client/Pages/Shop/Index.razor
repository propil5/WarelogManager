@page "/shop/products"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WarelogManager.Client.Resources.Common
@using WarelogManager.Client.Resources.Sales
@using WarelogManager.Shared.Resources.Warehouse.InventoryItem
@using WarelogManager.Shared.Resources.Warehouse.Product
@attribute [Authorize]
@inject NavigationManager NavManager
@inject HttpClient Http
@inject IToastService toastService

<h1>Products</h1>

@if(products == null)
{
    <div class="spinner-grow text-success" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <MudGrid>
        @foreach(var product in products)
        {
            var image = GetItemImage(product.InventoryItems);
            <MudItem xs="3">
                <MudCard xs="3">
                    <MudCardMedia Image="@(image.Src)" Height="200" />
                    <MudCardContent>
                        <MudText>@product.Name</MudText>
                    </MudCardContent>
                    <MudCardActions>
                            <MudButton Disabled="@(!product.InventoryItems.Any())"Variant="Variant.Text" Color="Color.Success" 
                                @onclick="() => AddToBasket(product.InventoryItems.First())">Add to basket</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

   // <div class="row">
@*        @foreach(var item in products.SelectMany(x => x.InventoryItems))
        {
            <MudCard>
                <MudCardContent>
                    
                    <MudCarousel ShowArrows="@arrows" ShowDelimiters="@delimiters" AutoCycle="@autocycle" TData="object">
                        <MudText Typo="Typo.h5">@item.ProductName</MudText>
                        @foreach(var image in GetItemImages(item))
                        {
                            <MudCarouselItem Transition="@transition">
                                <div class="d-flex" style="height:100%; width:100%">
                                    <img src="@image.Src" alt="@image.Alt" />
                                </div>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </MudCardContent>
            </MudCard>
        }*@
    //</div>
}

@code {
    private ProductResource[] products;
    bool IsTaskRunning = false;
    bool DisplayEditColumn => products?.Any(x => x.EditedBy != null) ?? false;
    private bool arrows = true;
    private bool delimiters = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;

    protected override async Task OnInitializedAsync()
    {
        await GetProductsAsync();        
    }

    private async Task GetProductsAsync()
    {
        products = await Http.GetFromJsonAsync<ProductResource[]>("api/product/");
    }

    private BaseImageResource GetItemImage(List<InventoryItemResource> inventoryItems)
    {
        var images = new List<BaseImageResource>();
        if (inventoryItems == null || inventoryItems.Count == 0 || inventoryItems.First().Images == null || inventoryItems.First().Images.Count == 0)
        {
            return new BaseImageResource
            {
                Src = @"/images/question_mark.png",
                Alt = "n/a"
            };
        }
        else
        {

            return GetBaseImageResource(inventoryItems.First().Images.First());

            foreach(var image in inventoryItems.First().Images)
            {
                return GetBaseImageResource(image);
            }
        }
    }

    private BaseImageResource GetBaseImageResource(BaseImageResource imageResource)
    {
        imageResource.Src = $"data:{imageResource.Type};base64,{Convert.ToBase64String(imageResource.Data)}";
        imageResource.Alt = imageResource.Alt ?? "n/a";
        return imageResource;
    }
    private async void AddToBasket(InventoryItemResource inventoryItem)
    {
        IsTaskRunning = true;
        var basketItem = new BasketItemResource
        {
            InventoryItemId = inventoryItem.Id,
            Quantity = 1
        };

        
        var result = await Http.PostAsJsonAsync("api/basket/item", basketItem);
        if (result.IsSuccessStatusCode)
        {
            toastService.ShowSuccess($"Succesfully added product to the basket.");
        }
        else
        {
            toastService.ShowError($"Could not add product.");
        }
        IsTaskRunning = false;
    }
}
