@page "/shop/basket"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text
@using Newtonsoft.Json
@using WarelogManager.Client.Resources.Common
@using WarelogManager.Client.Resources.Sales
@using WarelogManager.Shared.Resources.Warehouse.InventoryItem
@using WarelogManager.Shared.Resources.Warehouse.Product
@using Microsoft.AspNetCore.JsonPatch

@attribute [Authorize]
@inject NavigationManager NavManager
@inject HttpClient Http
@inject IToastService toastService

<h1>Basket</h1>

@if (basketItems == null)
{
    <div class="spinner-grow text-success" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <MudGrid>
        @foreach (var basketItem in basketItems)
        {
            var item = basketItem.InventoryItem;
            var image = GetItemImage(item);
            <MudItem xs="3">
                <MudCard xs="3">
                    <MudCardMedia Image="@(image.Src)" Height="200" />
                    <MudCardContent>
                        <MudText>@item.ProductName</MudText>
                    </MudCardContent>
                    <MudCardContent>
                       @* <MudNumericField Label="Quantity" @bind-Value="basketItem.Quantity" For="(() => UpdateItemQuantity(basketItem))"></MudNumericField>*@
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Success"
                            @onclick="() => RemoveBasketItemAsync(basketItem.Id)">Remove
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
@code {
    private BasketItemResource[] basketItems;
    bool IsTaskRunning = false;

    protected override async Task OnInitializedAsync()
    {
        await GetProductsAsync();        
    }

    private async Task GetProductsAsync()
    {
        basketItems = await Http.GetFromJsonAsync<BasketItemResource[]>("api/basket/");
    }

    private BaseImageResource GetItemImage(InventoryItemResource inventoryItem)
    {
        var images = new List<BaseImageResource>();
        if (inventoryItem.Images == null || inventoryItem.Images.Count == 0)
        {
            return new BaseImageResource
            {
                Src = @"/images/question_mark.png",
                Alt = "n/a"
            };
        }
        else
        {
            return GetBaseImageResource(inventoryItem.Images.First());
        }
    }

    private async Task RemoveBasketItemAsync(int id)
    {
        IsTaskRunning = true;
        var result = await Http.DeleteAsync($"api/basket/item/{id}");
        if (result.IsSuccessStatusCode)
        {
            toastService.ShowWarning($"Succesfully removed basket item with id: {id}.");
            await GetProductsAsync();
        }
        IsTaskRunning = false;
    }

    private async Task UpdateItemQuantity(BasketItemResource basketItemResource)
    {
        var patchDoc = new JsonPatchDocument<BasketItemResource>();
        patchDoc.Replace(e => e.Quantity, basketItemResource.Quantity);
        var serializedDoc = JsonConvert.SerializeObject(patchDoc);

        var itemId = basketItemResource.Id;
        var requestContent = new StringContent(serializedDoc, Encoding.UTF8, "application/json-patch+json");
        var response = await Http.PatchAsync($"api/basket/item/{itemId}", requestContent);
    }

    private BaseImageResource GetBaseImageResource(BaseImageResource imageResource)
    {
        imageResource.Src = $"data:{imageResource.Type};base64,{Convert.ToBase64String(imageResource.Data)}";
        imageResource.Alt = imageResource.Alt ?? "n/a";
        return imageResource;
    }
}