// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarelogManager.Model.Mapping;

namespace WarelogManager.Model.Mapping.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210831230650_UpdateBasketItem")]
    partial class UpdateBasketItem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Accounting.AccountingBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int?>("ForAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForAccountId");

                    b.HasIndex("PaymentAccountId");

                    b.ToTable("AccountingBalance");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Accounting.BillingAccountDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BillingAccount");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Accounting.InvoiceDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InvoiceForId")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceFromId")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceForId");

                    b.HasIndex("InvoiceFromId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Accounting.InvoiceOrderDto", b =>
                {
                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("int");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("InvoiceOrder");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Common.AddressDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FlatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Common.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Estimating.EstimateProductDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EstimationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EstimationStatusId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsImportant")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EstimationStatusId");

                    b.ToTable("EstimateProduct");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Estimating.EstimateStatusDto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Derscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EstimateStatus");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Inbound.IncomingTransportDto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StatusId");

                    b.ToTable("IncomingTransports");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Inbound.SupplierDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("BillingAccId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillingAccId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Inbound.SupplyDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SupplyOrderId");

                    b.ToTable("Supply");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Inbound.SupplyOrderDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OrderedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderById");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplyOrders");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Inbound.TransportStatusDto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransportStatus");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Monitoring.AtmosphereConditionDto", b =>
                {
                    b.Property<double?>("CO")
                        .HasColumnType("float");

                    b.Property<double?>("Hummidity")
                        .HasColumnType("float");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("PM10")
                        .HasColumnType("float");

                    b.Property<double?>("PM25")
                        .HasColumnType("float");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<double?>("TempC")
                        .HasColumnType("float");

                    b.Property<double?>("UV")
                        .HasColumnType("float");

                    b.Property<double?>("WindSpeed")
                        .HasColumnType("float");

                    b.HasIndex("PlaceId");

                    b.ToTable("AtmosphereCondition");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Payment.PaymentDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("PayedAmount")
                        .HasColumnType("float");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("UserId1");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Payment.PaymentMethodDto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("PaymentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Payment.PaymentStatusDto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Sales.BasketItemDto", b =>
                {
                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("BasketItem");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Sales.SalesOrderDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int?>("OrderedById")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("OrderedById1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesOrderStatusId")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderedById1");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SalesOrderStatusId");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Sales.SalesOrderLineDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<double>("SalesTax")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderLine");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Sales.SalesOrderShippingDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderShipping");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Sales.SalesOrderStatusDto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SalesOrderStatus");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Utilities.PlaceDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Inside")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostitionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Utilities.PositionDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("PostitionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Utilities.SizeDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EuroShoeSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EuroSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderType")
                        .HasColumnType("int");

                    b.Property<bool?>("IsKid")
                        .HasColumnType("bit");

                    b.Property<string>("UkShoeSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UkSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsShozeSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsSize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.CompanyDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddresId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.InventoryItemDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Descritption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SKULabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMeasure")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("EditedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("InventoryItem");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.InventoryItemImageDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("InventoryItemImage");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.PalletDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DispacheTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Pallet");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.PlantDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantTypeId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Plant");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.ProductDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PalletId")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("EditedById");

                    b.HasIndex("PalletId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.RackDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColumnNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ColumnWidth")
                        .HasColumnType("int");

                    b.Property<int?>("DepthNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Localization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocalizationX")
                        .HasColumnType("int");

                    b.Property<int>("LocalizationY")
                        .HasColumnType("int");

                    b.Property<bool>("PalletRack")
                        .HasColumnType("bit");

                    b.Property<int?>("RowHeight")
                        .HasColumnType("int");

                    b.Property<int>("ShelfNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Accounting.AccountingBalance", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Accounting.BillingAccountDto", "ForAccount")
                        .WithMany()
                        .HasForeignKey("ForAccountId");

                    b.HasOne("WarelogManager.Model.DataTransfer.Accounting.BillingAccountDto", "PaymentAccount")
                        .WithMany()
                        .HasForeignKey("PaymentAccountId");

                    b.Navigation("ForAccount");

                    b.Navigation("PaymentAccount");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Accounting.InvoiceDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Accounting.BillingAccountDto", "InvoiceFor")
                        .WithMany()
                        .HasForeignKey("InvoiceForId");

                    b.HasOne("WarelogManager.Model.DataTransfer.Accounting.BillingAccountDto", "InvoiceFrom")
                        .WithMany()
                        .HasForeignKey("InvoiceFromId");

                    b.Navigation("InvoiceFor");

                    b.Navigation("InvoiceFrom");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Accounting.InvoiceOrderDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Accounting.InvoiceDto", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("WarelogManager.Model.DataTransfer.Sales.SalesOrderDto", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("SalesOrderId");

                    b.Navigation("Invoice");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Estimating.EstimateProductDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Estimating.EstimateStatusDto", "EstimationStatus")
                        .WithMany()
                        .HasForeignKey("EstimationStatusId");

                    b.Navigation("EstimationStatus");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Inbound.IncomingTransportDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Warehouse.CompanyDto", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("WarelogManager.Model.DataTransfer.Inbound.TransportStatusDto", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Company");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Inbound.SupplierDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Accounting.BillingAccountDto", "BillingAcc")
                        .WithMany()
                        .HasForeignKey("BillingAccId");

                    b.Navigation("BillingAcc");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Inbound.SupplyDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Sales.SalesOrderLineDto", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("WarelogManager.Model.DataTransfer.Inbound.SupplyOrderDto", "SupplyOrder")
                        .WithMany()
                        .HasForeignKey("SupplyOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SupplyOrder");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Inbound.SupplyOrderDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", "OrderBy")
                        .WithMany()
                        .HasForeignKey("OrderById");

                    b.HasOne("WarelogManager.Model.DataTransfer.Inbound.SupplierDto", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("OrderBy");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Monitoring.AtmosphereConditionDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Utilities.PlaceDto", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Payment.PaymentDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Sales.SalesOrderDto", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("WarelogManager.Model.DataTransfer.Payment.PaymentMethodDto", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("WarelogManager.Model.DataTransfer.Payment.PaymentStatusDto", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId");

                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Sales.BasketItemDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("WarelogManager.Model.DataTransfer.Warehouse.InventoryItemDto", "InventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Sales.SalesOrderDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", "OrderedBy")
                        .WithMany()
                        .HasForeignKey("OrderedById1");

                    b.HasOne("WarelogManager.Model.DataTransfer.Payment.PaymentMethodDto", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("WarelogManager.Model.DataTransfer.Sales.SalesOrderStatusDto", "SalesOrderStatus")
                        .WithMany()
                        .HasForeignKey("SalesOrderStatusId");

                    b.Navigation("OrderedBy");

                    b.Navigation("PaymentMethod");

                    b.Navigation("SalesOrderStatus");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Sales.SalesOrderLineDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Warehouse.InventoryItemDto", "InventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItemId");

                    b.HasOne("WarelogManager.Model.DataTransfer.Sales.SalesOrderDto", "SalesOrder")
                        .WithMany("Product")
                        .HasForeignKey("SalesOrderId");

                    b.Navigation("InventoryItem");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Sales.SalesOrderShippingDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Sales.SalesOrderDto", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("SalesOrderId");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Utilities.PositionDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.CompanyDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Common.AddressDto", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.InventoryItemDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedById");

                    b.HasOne("WarelogManager.Model.DataTransfer.Warehouse.ProductDto", "Product")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("WarelogManager.Model.DataTransfer.Utilities.SizeDto", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.Navigation("AddedBy");

                    b.Navigation("EditedBy");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.InventoryItemImageDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Warehouse.InventoryItemDto", "InventoryItem")
                        .WithMany("Images")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.PalletDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Warehouse.CompanyDto", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.PlantDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Common.AddressDto", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.ProductDto", b =>
                {
                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("WarelogManager.Model.DataTransfer.Common.ApplicationUser", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedById");

                    b.HasOne("WarelogManager.Model.DataTransfer.Warehouse.PalletDto", "Pallet")
                        .WithMany("Products")
                        .HasForeignKey("PalletId");

                    b.Navigation("AddedBy");

                    b.Navigation("EditedBy");

                    b.Navigation("Pallet");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Sales.SalesOrderDto", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.InventoryItemDto", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.PalletDto", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WarelogManager.Model.DataTransfer.Warehouse.ProductDto", b =>
                {
                    b.Navigation("InventoryItems");
                });
#pragma warning restore 612, 618
        }
    }
}
